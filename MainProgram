#include "SoftwareSerial.h"
#include "DFRobotDFPlayerMini.h"

// Use pins 2 and 3 to communicate with DFPlayer Mini
static const uint8_t PIN_MP3_TX = 11; // Connects to module's RX 
static const uint8_t PIN_MP3_RX = 10; // Connects to module's TX 
SoftwareSerial softwareSerial(PIN_MP3_RX, PIN_MP3_TX);

// Create the Player object
DFRobotDFPlayerMini player;

//initialize buttons and LED ports
const uint8_t blueButton = 2;
const uint8_t redButton = 3;
const uint8_t greenButton = 4;
const uint8_t yellowButton = 5;
const uint8_t blueLed = 9;
const uint8_t redLed = 6;
const uint8_t greenLed = 7;
const uint8_t yellowLed = 8;
const uint8_t volumeButton = 12;
const uint8_t modeSwitch = 13;

int gameIndex;
#define MAX_LENGTH 100
uint8_t gameMode = 0;
uint8_t user = 1;
int volume;

uint8_t gameSequence[MAX_LENGTH];
uint8_t currentRound = 0;

//break out of while loop for interrupt
bool interrupt_flag = false;

//Set up the Arduino board
void setup() {
  Serial.begin(9600);
	// Init serial port for DFPlayer Mini
	softwareSerial.begin(9600);
  //set up inputs and outputs
  pinMode(redLed, OUTPUT);
  pinMode(yellowLed, OUTPUT);
  pinMode(blueLed, OUTPUT);
  pinMode(greenLed, OUTPUT);
  pinMode(redButton, INPUT_PULLUP);
  pinMode(yellowButton, INPUT_PULLUP);
  pinMode(blueButton, INPUT_PULLUP);
  pinMode(greenButton, INPUT_PULLUP);
  pinMode(volumeButton, INPUT_PULLUP);
  pinMode(modeSwitch, INPUT_PULLUP);

  PCICR |= B00000001; // We activate the interrupts of the PB port
  PCMSK0 |= B00110000; // We activate the interrupts on pin D12 and D13

  gameIndex = 0;
	volume = 10;
	player.volume(volume);
  gameSequence[MAX_LENGTH] = {0};

  // The following line primes the random number generator.
  // It assumes pin A3 is floating (disconnected):
  randomSeed(analogRead(A3));

  if (digitalRead(modeSwitch) == LOW) {
      Serial.print("Single Player\n");
      gameMode = 0;
  }
  if (digitalRead(modeSwitch) == HIGH) {
      Serial.print("Multiplayer\n");
      gameMode = 1;
  }
}

//Light LED sequence
void lightLed(int ledIndex) {
  switch (ledIndex){
    case 2:
      digitalWrite(blueLed, HIGH);
      delay(1000);
      digitalWrite(blueLed, LOW);
      break;
    case 3:
      digitalWrite(redLed, HIGH);
      delay(1000);
      digitalWrite(redLed, LOW);
      break;
    case 5:
      digitalWrite(yellowLed, HIGH);
      delay(1000);
      digitalWrite(yellowLed, LOW);
      break;
    case 4:
      digitalWrite(greenLed, HIGH);
      delay(1000);
      digitalWrite(greenLed, LOW);
      break;
    default:
      break;
  }
  player.play(ledIndex);
}

//Lights the proper LEDs
void playSequence() {
  delay(500);
  for (int i = 0; i < gameIndex; i++) {
    if (interrupt_flag) break;
    int currentLed = gameSequence[i];
    lightLed(currentLed);
    delay(375);
  }
}

//wait for button read from user
int readButtons() {
  int i = 0;
  while(true) {
    if (interrupt_flag) break;
    if (digitalRead(blueButton) == HIGH) {
      i = 2;
    Serial.println(i);
    return i;
    }
    else if (digitalRead(redButton) == HIGH) {
      i = 3;
    Serial.println(i);
    return i;
    }
    else if (digitalRead(greenButton) == HIGH) {
      i = 4;
    Serial.println(i);
    return i;
    }
    else if (digitalRead(yellowButton) == HIGH) {
      i = 5;
    Serial.println(i);
    return i;
    }
  }
  delay(1);
}

//flash LEDs all on when game is over and report score to console
void gameOver() {
  Serial.print("Game over! Your score: ");
  Serial.println(gameIndex - 1);
  gameIndex = 0;
  delay(200);
  digitalWrite(redLed, HIGH);
  digitalWrite(yellowLed, HIGH);
  digitalWrite(greenLed, HIGH);
  digitalWrite(blueLed, HIGH);
  delay(500);
  digitalWrite(redLed, LOW);
  digitalWrite(yellowLed, LOW);
  digitalWrite(greenLed, LOW);
  digitalWrite(blueLed, LOW);
}

//compare user input to the current array
bool checkUserSequence() {
  for (int i = 0; i < gameIndex; i++) {
    if (interrupt_flag) break;
    int expectedButton = gameSequence[i];
    byte actualButton = readButtons();
    lightLed(actualButton);
    if (expectedButton != actualButton) {
      return false;
    }
  }
  return true;
}

//Clear the current game tracking
void Clear_Array(){
  gameIndex = 0;
  gameSequence[MAX_LENGTH] = {0};
}

//The main game loop
void loop() {
  interrupt_flag = false;
  if (gameMode == 0) {
    // Add a random color to the end of the sequence
    gameSequence[gameIndex] = random(2, 6);
    gameIndex++;
    if (gameIndex >= MAX_LENGTH) {
      gameIndex = MAX_LENGTH - 1;
    }

    playSequence();
    if (interrupt_flag) continue;
    if (!checkUserSequence()) {
      if (interrupt_flag) continue;
      gameOver();
			player.play(1);
    }

    delay(300);

    if (gameIndex > 0) {
      delay(300);
    }
  }
  
  if (gameMode == 1) {
    byte actualButton = readButtons();
    lightLed(actualButton);
    delay(1000);
    gameSequence[gameIndex] = actualButton;
    gameIndex++;

    playSequence();
    if (interrupt_flag) continue;
    
    if (user == 1) {
      user = 2;
    }

    if (user == 2) {
      user = 1;
    }

    if (!checkUserSequence()) {
      if (interrupt_flag) continue;
      gameOver();
			player.play(user + 5);
    }
  }
}

ISR(PCINT0_vect) {
    if (digitalRead(modeSwitch) == LOW) {
      Serial.print("Single Player\n");
      gameMode = 0;
      Clear_Array();
      interrupt_flag = true;
    }
    else if (digitalRead(modeSwitch) == HIGH) {
      Serial.print("Multiplayer\n");
      gameMode = 1;
      Clear_Array();
      interrupt_flag = true;
    }
    else {
      if (volume < 30) {
        volume += 10;
      } else {
        volume = 0;
      }
      player.volume(volume);
    }
    delay(1000);
}
